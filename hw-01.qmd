---
  title: "HW 01"
author: "Harshit Mehra"
format: 
  html:
  embed-resources: true
toc: true
---
  
  ## 1 - Road traffic accidents in Edinburgh
  
  ```{r label-me-1}

### Libraries i have used:-
library(dsbox)
library(ggplot2)
library(dplyr)   
library(openintro)
library(gridExtra)
library(ggrepel)
library(gridExtra)
library(pacman)

## 1 - Road traffic accidents in Edinburgh


#--------


# What this Data Tells :
  
#  Plot is helping us understand the distribution of accidents throughout the day,
#  with a focus on how this distribution changes between weekends and weekdays.
#  It aims to show whether the severity of accidents varies with time of day and day of the week.

# Density plot is a good choice for this data because:

#  It allows the visualization of the distribution of accidents over time, 
#  taking into account both time of day and day of the week, while also considering different severity levels.
#  It also provides a clearer view of accident patterns in the dataset.

#--------


# Loading data from the dsbox package in R,
# First we need to install and load the package.
devtools::install_github("rstudio-education/dsbox", force = TRUE)



accidents = accidents |>
  mutate(r_days = ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))

# This line uses the pipe operator"|>"  to take the "accidents" Dataset and add a new column "r_days."
# and "ifelse" function is used to assign values conditionally to the "r_days" column
# based on the values in the "day_of_week" column.
# If "day_of_week" is "Saturday" or "Sunday," it assign "Weekend"; otherwise, it assign "Weekday."


# Initializing a plot using the "accidents" dataset
# which specifies that the x-axis should represent the "time" variable, 
# and the fill color should be based on the "severity" variable.
ggplot(accidents,
       aes(x = time,
           fill = severity)) +
  geom_density(alpha = 0.4) +                    # alpha for transparency 
  facet_wrap(~r_days, dir = 'v') +     # creating subplots for different levels of "r_days" variable(Vertically)
  scale_fill_manual(values = c("mediumpurple4" , "cadetblue" , "khaki2"))+
  labs(x = "Time of day",
       y = "Density",
       color = NULL,
       title = "Number of accidents throughout the day",
       subtitle = "By day of week and severity",
       fill = "Severity") +
  # This part changes the appearance of the plot
  theme(plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 13))


```

## 2 - NYC marathon winners

```{r label-me-2}

## Question 2(a)

# histogram :-


ggplot(nyc_marathon,             # This line creates a plot using the "nyc_marathon" dataset
       aes(x = time)) +          # where the x-axis is representing the "time" variable from dataset.
  geom_histogram(binwidth = 350, color = 'black', fill = 'lavender') +
  labs(
    x = "Finish Time (minutes)",                             # X-axis Label
    y = "Frequency",                                         # Y-axis Label
    title = "Distribution of NYC Marathon Finish Times"      # Plot  Title
  ) +
  theme_minimal()                          # Cleaner theme


#--------------

#  This histogram represents the distribution of finish times for the NYC Marathon runners.
# The x-axis shows the finish times in minutes, and the y-axis represents the "number of runners" in each bin.
# The histogram helps us understand the distribution of finish times, 
# showing whether they are skewed, normally distributed, or exhibit other patterns.
# It gives us insights into the typical finish times of marathon runners.

#--------------

## Question 2(b)

# boxplot :-


ggplot(nyc_marathon,        # This line creates a plot using the "nyc_marathon" dataset
       aes(y = time)) +     # where the x-axis is representing the "time" variable from dataset.
  geom_boxplot() +
  labs(
    x = NULL,                               # X-axis label (no label)
    y = "Finish Time (minutes)",            # Y-axis label
    title = "Box Plot of NYC Marathon Finish Times",  # Plot title
    subtitle = "Question 2(a)",             # Plot subtitle
  ) +
  theme_minimal()  # Cleaner theme


#--------------

# This boxplot shows the distribution of finish time across different divisions of the NYC Marathon.
# The x-axis displays the divisions, while the y-axis represents the finishing time in minute.
# Each boxplot shows the median which is center line, interquartile range (box), and potential outliers (individual points).
# It allows us to compare the finish time distributions across different divisions, 
# identifying variations and potential outliers within each division.

#--------------

# Plotting box plot side-by-side:- 

ggplot(nyc_marathon,          # This line creates a plot using the "nyc_marathon" dataset
       aes(x = division,      # X-axis representing "division" variable from dataset
           y = time,          # Y-axis representing "time" variable from dataset
           fill = division)) +
  geom_boxplot() +            # To create a Boxplot.
  scale_fill_manual(values = c("skyblue", "pink"))

# Question 2(c)

ggplot(nyc_marathon, 
       aes(x = division,
           y = time,
           fill = division)) +
  geom_boxplot() +
  scale_fill_manual(values = c("skyblue", "pink")) +
  labs(x = NULL) +
  theme(legend.position = "none")      # Removed Legends using this.


# Removing the legends can make the plot cleaner and less cluttered, 
# Also the "division" variable was not providing any additional information.


#--------------

# Similar to the previous boxplot, this one also displays the distribution of finish times across divisions.
# But, the legends have been removed to focus solely on the boxplots.
# It helps to visually compare the distributions of finish times for different divisions.

#--------------



# Question 2(d)


# Plotting time series:-

ggplot(nyc_marathon,              # Creating a ggplot visualization:
       aes(x = year,
           y = time,
           group = division,
           color = division)) +
  geom_line(size = 1.5) +          # Increase line size for better visibility
  labs(x = "Year",                 # Add x-axis label
       y = "Finish Time",          # Add y-axis label
       title = "NYC Marathon Finish Times Over the Years",     # Add plot title
       subtitle = "By Division") +                            # Add plot subtitle           
  scale_color_manual(values = c("skyblue", "pink")) +          # Define custom colors
  theme_minimal()               # Use a minimal theme for a cleaner look
  

  # Insights:
  # This line plot visualizes the NYC Marathon finish times over the years for different divisions.
  # - The x-axis represents the years, providing a chronological view.
  # - The y-axis represents the finish time, showing how it varies over time.
  # - Each division is represented by a different color (skyblue and pink), making it easy to distinguish them.
  # - The larger lines improve visibility and readability.
  # - The plot shows the trend of finish times for different divisions, allowing us to compare their performance over the years.
  # - Further analysis and interpretation could reveal insights into whether certain divisions are improving or if there are outliers in specific years.
  


#--------------

# This line plot shows the trends in finish times for the NYC Marathon over different years.
# The x-axis represents the years, and the y-axis shows the finish times.
# Each line represents a different division of the marathon, with unique colors.
# By observing the lines, we can identify patterns in finish times for each division over time.
# This plot helps us analyze how finish times got better across the years.

#--------------



```

## 3 - US counties
```{r label-me-3}


# Defining each individual ggplot plot :


# Plot A :

plot_A = ggplot(county, aes(x = homeownership, y = poverty)) + geom_point() # For Scatter Plot.
# Creating a plot using "county" dataset.


# Plot B :

plot_B = ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_point() +              # First layer of Scatter Plot.
  geom_smooth(se = FALSE)     # Second layer of  Line Plot.
            # SE + FAlSE to remove shaded region around the line.

# Plot C :

plot_C = ggplot(county, aes(x = homeownership, y = poverty, group = metro)) +  # "metro "To group the data for smooth line.
  geom_point() +
  geom_smooth(se = FALSE, color = 'green') # Change Line color as Green.

# Plot D :

plot_D = ggplot(county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_smooth(se = FALSE) +   # First layer of Line Plot.
  geom_point()                # Second layer of Scatter Plot.


# Plot E :

              # To determine the color of data points in the scatter plot.
plot_E = ggplot(county, aes(x = homeownership, y = poverty, group = metro, color = metro)) +
  geom_point() +      # Scatter Plot then Smooth Line 
  geom_smooth(aes(linetype = metro), se = FALSE, color = 'blue') +  # Remove Shaded area
  guides(color = guide_legend(order = 2), linetype = guide_legend(order = 1))
# setting order of legends for color aesthetic to 2 and linetype aesthetic to 1. 

# Plot F :

plot_F = ggplot(county, aes(x = homeownership, y = poverty, group = metro, color = metro)) +
  geom_point() +      # Scatter Plot then Smooth Line 
  geom_smooth(se = FALSE)  # Remove Shaded area

# Plot G :

plot_G = ggplot(county, aes(x = homeownership, y = poverty, color = metro)) +
  geom_point() +
  geom_smooth(aes(group = "all"), se = FALSE) 
 # "all" data points will be treated as they belong to a single group

# Plot H :

plot_H = ggplot(county, aes(x = homeownership, y = poverty, color = metro)) +
  geom_point()


# Arranging the plots into a grid layout
grid.arrange(plot_A, plot_B, plot_C, plot_D, plot_E, plot_F, plot_G, plot_H, ncol = 2)



```


## 4 - Rental apartments in SF
```{r label-me-4}

# Load necessary libraries
library(tidyverse)
library(scales)

# Read the rent data
rent <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv')

# Filter data for San Francisco and available rooms
sf_rent <- rent %>%
  filter(city == "san francisco" & room_in_apt == 0)

# Create a summary table counting rentals per neighborhood
n_count <- sf_rent %>%
  group_by(nhood) %>%
  summarise(count = n())

# Create a new grouping for neighborhoods
sf_rent1 <- sf_rent %>%
  mutate(
    nb_groups = ifelse(nhood %in% c("CCSF", "NOPA", "SOMA / south beach"),
                       "Others",
                       nhood)
  )

# Filter data for specific neighborhoods
final_rent <- sf_rent1 %>%
  filter(nb_groups %in% c("Others", "sea cliff", "nob hill", "downtown",
                          "mission district", "outer sunset", "parkside", "cole valley"))

# Select specific years
yr <- c(2003, 2006, 2009, 2012, 2015, 2018)

final_rent1 <- final_rent %>%
  filter(year %in% yr)

# Create custom labels for neighborhoods
new_labels <- as_labeller(c(
  "mission district" = "Mission District",
  "downtown" = "Downtown",
  "nob hill" = "Nob Hill",
  "Others" = "Others",
  "outer sunset" = "Outer Sunset",
  "sea cliff" = "Sea Cliff",
  "cole valley" = "Cole Valley",
  "parkside" = "Parkside"
))

# Create a boxplot for rental prices per bedroom
ggplot(final_rent1, 
       aes(x = nb_groups,
           y = price/beds,
           fill = as.factor(year))) +
  geom_boxplot(width = 0.7) +
  
  # Facet by neighborhood with a horizontal legend at the top
  facet_wrap(~nb_groups, scales = "free", labeller = new_labels, ncol = 4) +
  
  labs(x = "Neighbourhood in San Francisco",
       y = "Rental Price per Bedroom",
       title = "Rental Apartments in SF",
       fill = "Year") +
  
  # Adjust legend position and appearance
  theme(legend.position = "right", legend.title = element_blank()) +
  
  # Remove x-axis labels
  scale_x_discrete(labels = NULL) +
  
  # Format y-axis labels as dollar amounts
  scale_y_continuous(labels = label_dollar())


```


## 5 - Napoleon’s march.
```{r label-me-5}




# Reading the Napoleon's data from the "napoleon.rds" file.
napoleon = readRDS("data/napoleon.rds")

# Displaying the loaded data objects.
napoleon
napoleon$cities
napoleon$temperatures
napoleon$troops

# Creating a plot to visualize troop movement data.
# Mapping longitude to x-axis, latitude to y-axis, 
# color to direction, and size to survivors.
# Customizing the lineend style and size range.
troops = ggplot(napoleon$troops,
                aes(x = long,
                    y = lat)) +
  geom_path(aes(size = survivors,       # Line Plot
                color = direction,
                group = group),
            lineend = "round") +
  scale_size(range = c(2, 13)) +
  scale_color_manual(values = c("lavender", "darkgray"))

# Overlaying city locations on the troop movement plot.
# Customizing text labels for cities.
cities = troops +
  geom_point(data = napoleon$cities,    # Scatter Plot
             aes(x = long,
                 y = lat),
             color = "purple") +
  geom_text_repel(data = napoleon$cities,  # Text Labelling 
                  aes(x = long,
                      y = lat,
                      label = city),
                  color = "darkred",
                  family = "Open Sans Condensed",
                  fontface = "bold")

# Creating a plot to visualize temperature data.
# Mapping longitude to x-axis, temperature to y-axis.
# Representing temperature data points as a line.
temp = ggplot(napoleon$temperatures,       # Aesthetic 
              aes(x = long,
                  y = temp)) +
  geom_path(color = "pink",                # Line Plot
            size = 2) +
  geom_point(size = 2) +
  geom_text_repel(aes(label = paste0(temp, "°", "/", day, month)), size = 3)

# Adjusting x-axis limits without filtering data points.
cities = cities +
  coord_cartesian(xlim = c(24, 38)) +       # Zooming 
  theme_void() +
  labs(x = NULL, y = NULL) +                # Labeling 
  theme(legend.position = "none")

# Adjusting x-axis limits for temperature plot.
temp = temp +
  coord_cartesian(xlim = c(24, 38)) +       # Zooming
  labs(x = NULL, y = "Temperature") +       # Labeling
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        panel.border = element_blank())

# Arranging the cities and temperature plots into a grid.
grid.arrange(cities,
             temp,
             nrow = 2, 
             heights = c(3.5, 1.2))

```
