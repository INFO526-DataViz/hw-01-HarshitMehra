---
  title: "HW 01"
author: "Harshit Mehra"
format: 
  html:
  embed-resources: true
toc: true
---
  
  ## 1 - Road traffic accidents in Edinburgh
  
  ```{r label-me-1}

### Libraries i have used:-
library(dsbox)
library(ggplot2)
library(dplyr)   
library(openintro)
library(gridExtra)
library(ggrepel)
library(gridExtra)
library(pacman)

## 1 - Road traffic accidents in Edinburgh



# Loading data from the dsbox package in R,
# First we need to install and load the package.
devtools::install_github("rstudio-education/dsbox", force = TRUE)



accidents = accidents |>
  mutate(r_days = ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))

# This line uses the pipe operator"|>"  to take the "accidents" Dataset and add a new column "r_days."
# and "ifelse" function is used to assign values conditionally to the "r_days" column
# based on the values in the "day_of_week" column.
# If "day_of_week" is "Saturday" or "Sunday," it assign "Weekend"; otherwise, it assign "Weekday."


# Initializing a plot using the "accidents" dataset
# which specifies that the x-axis should represent the "time" variable, 
# and the fill color should be based on the "severity" variable.
ggplot(accidents,
       aes(x = time,
           fill = severity)) +
  geom_density(alpha = 0.4) +                    # alpha for transparency 
  facet_wrap(~r_days, dir = 'v') +     # creating subplots for different levels of "r_days" variable(Vertically)
  scale_fill_manual(values = c("mediumpurple4" , "cadetblue" , "khaki2"))+
  labs(x = "Time of day",
       y = "Density",
       color = NULL,
       title = "Number of accidents throughout the day",
       subtitle = "By day of week and severity",
       fill = "Severity") +
  # This part changes the appearance of the plot
  theme(plot.title = element_text(size = 18, color = "navy"),
        plot.subtitle = element_text(size = 13))


```

## 2 - NYC marathon winners

```{r label-me-2}

## Question 2(a)

# histogram :-


ggplot(nyc_marathon,            # This line creates a plot using the "nyc_marathon" dataset
       aes(x = time)) +         # where the x-axis is representing the "time" variable from dataset.
   # To Create a Histogram of color fill "Lavender" and "Navy" borders
  geom_histogram(binwidth = 350, fill = 'lavender', color = 'navy') 


# boxplot :-


ggplot(nyc_marathon,        # This line creates a plot using the "nyc_marathon" dataset
       aes(y = time)) +     # where the x-axis is representing the "time" variable from dataset.
  # To Create a simple Boxplot
  geom_boxplot() 


## Question 2(b)

# Plotting box plot side-by-side:- 

ggplot(nyc_marathon,          # This line creates a plot using the "nyc_marathon" dataset
       aes(x = division,      # X-axis representing "division" variable from dataset
           y = time,          # Y-axis representing "time" variable from dataset
           fill = division)) +
  geom_boxplot() +            # To create a Boxplot.
  scale_fill_manual(values = c("skyblue", "pink"))

# Question 2(c)

ggplot(nyc_marathon, 
       aes(x = division,
           y = time,
           fill = division)) +
  geom_boxplot() +
  scale_fill_manual(values = c("skyblue", "pink")) +
  labs(x = NULL) +
  theme(legend.position = "none")      # Removed Legends using this.

# Question 2(d)

# Plotting time series:-

ggplot(nyc_marathon,
       aes(x = year,
           y = time,
           group = division,
           color = division)) +
  geom_line() +               # To create a Line Plot.
  scale_color_manual(values = c("skyblue", "pink"))


```

## 3 - US counties
```{r label-me-3}


# Defining each individual ggplot plot :


# Plot A :

plot_A = ggplot(county, aes(x = homeownership, y = poverty)) + geom_point() # For Scatter Plot.
# Creating a plot using "county" dataset.


# Plot B :

plot_B = ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_point() +              # First layer of Scatter Plot.
  geom_smooth(se = FALSE)     # Second layer of  Line Plot.
            # SE + FAlSE to remove shaded region around the line.

# Plot C :

plot_C = ggplot(county, aes(x = homeownership, y = poverty, group = metro)) +  # "metro "To group the data for smooth line.
  geom_point() +
  geom_smooth(se = FALSE, color = 'green') # Change Line color as Green.

# Plot D :

plot_D = ggplot(county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_smooth(se = FALSE) +   # First layer of Line Plot.
  geom_point()                # Second layer of Scatter Plot.


# Plot E :

              # To determine the color of data points in the scatter plot.
plot_E = ggplot(county, aes(x = homeownership, y = poverty, group = metro, color = metro)) +
  geom_point() +      # Scatter Plot then Smooth Line 
  geom_smooth(aes(linetype = metro), se = FALSE, color = 'blue') +  # Remove Shaded area
  guides(color = guide_legend(order = 2), linetype = guide_legend(order = 1))
# setting order of legends for color aesthetic to 2 and linetype aesthetic to 1. 

# Plot F :

plot_F = ggplot(county, aes(x = homeownership, y = poverty, group = metro, color = metro)) +
  geom_point() +      # Scatter Plot then Smooth Line 
  geom_smooth(se = FALSE)  # Remove Shaded area

# Plot G :

plot_G = ggplot(county, aes(x = homeownership, y = poverty, color = metro)) +
  geom_point() +
  geom_smooth(aes(group = "all"), se = FALSE) 
 # "all" data points will be treated as they belong to a single group

# Plot H :

plot_H = ggplot(county, aes(x = homeownership, y = poverty, color = metro)) +
  geom_point()


# Arranging the plots into a grid layout
grid.arrange(plot_A, plot_B, plot_C, plot_D, plot_E, plot_F, plot_G, plot_H, ncol = 2)



```


## 4 - Rental apartments in SF
```{r label-me-4}


install.packages("pacman")
pacman::p_load(tidyverse,
               scales)



# Set theme for ggplot2:-

ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# Rent = read_csv("https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-07-05/rent.csv")

# Reading rent file:-

rent = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv')

# Filtering the data of SanFrancisco and availalbe rooms:-

sf_rent = rent|>
  filter(city == "san francisco" & room_in_apt == 0)
#  filtering the data where "city" is equal to "san francisco" & "room_in_apt" is equal to 0


# Summary table which counts rentals per neighborhood

n_count = sf_rent |> 
# This part of code take data frame "sf_rent" and uses the pipe operator(|>) to pass it as input to the next operation.
  group_by(nhood) |>
  summarise(count = n())  # count calculates Rows in each group


# Grouping the combination:-

sf_rent1 = sf_rent |>
  mutate(
    nb_groups = ifelse(nhood %in% c("CCSF",
                                    "NOPA",
                                    "SOMA / south beach"),
                       "Others",
                       nhood)
  )
# Filtering the data:-

final_rent = sf_rent1 |>
  filter(nb_groups %in% c("Others",
                          "sea cliff",
                          "nob hill",
                          "downtown",
                          "mission district",
                          "outer sunset",
                          "parkside",
                          "cole valley"))

# Selecting years:-
yr = c(2003, 
        2006,
        2009,
        2012,
        2015,
        2018)

final_rent1 = final_rent |>
  filter(year %in% yr)
#  %in%  operator checks if each value of "year" is present in the vector "yr".


# Creating Labels:-

new_labels = as_labeller(c(
  "mission district" = "Mission District",
  "downtown" = "Downtown",
  "nob hill" = "Nob Hill",
  "Others" = "Others",
  "outer sunset" = "Outer Sunset",
  "sea cliff" = "Sea Cliff",
  "cole valley" = "Cole Valley",
  "parkside" = "Parkside"
))


# Plotting graph:-

ggplot(final_rent1, 
       aes(x = nb_groups,
           y = price/beds,
           fill = as.factor(year))) +
  geom_boxplot(width = 0.7) +         # To create BoxPlot
  facet_wrap(~nb_groups,    # This is used to create a faceted plot, where each neighborhood is shown separately. 
             scales = "free",  # Allowing each facet to have its own independent scale
             labeller = new_labels, # custom labeling function
             ncol = 4) +    # Facets are arranged in four columns.
  labs(x = "Neighbourhood in San Francisco",    # Labeling 
       y = "Rental Price per Bedroom",
       title = "Rental Apartments in SF",
       fill = "Year") +
  scale_x_discrete(labels = NULL) +               # Removing Labels
  scale_y_continuous(labels = label_dollar())     # Formatting the labels as dollar amounts.



```


## 5 - Napoleonâ€™s march.
```{r label-me-5}




# Reading the Napoleon's data from the "napoleon.rds" file.
napoleon = readRDS("data/napoleon.rds")

# Displaying the loaded data objects.
napoleon
napoleon$cities
napoleon$temperatures
napoleon$troops

# Creating a plot to visualize troop movement data.
# Mapping longitude to x-axis, latitude to y-axis, 
# color to direction, and size to survivors.
# Customizing the lineend style and size range.
troops = ggplot(napoleon$troops,
                aes(x = long,
                    y = lat)) +
  geom_path(aes(size = survivors,       # Line Plot
                color = direction,
                group = group),
            lineend = "round") +
  scale_size(range = c(2, 13)) +
  scale_color_manual(values = c("lavender", "darkgray"))

# Overlaying city locations on the troop movement plot.
# Customizing text labels for cities.
cities = troops +
  geom_point(data = napoleon$cities,    # Scatter Plot
             aes(x = long,
                 y = lat),
             color = "purple") +
  geom_text_repel(data = napoleon$cities,  # Text Labelling 
                  aes(x = long,
                      y = lat,
                      label = city),
                  color = "darkred",
                  family = "Open Sans Condensed",
                  fontface = "bold")

# Creating a plot to visualize temperature data.
# Mapping longitude to x-axis, temperature to y-axis.
# Representing temperature data points as a line.
temp = ggplot(napoleon$temperatures,       # Aesthetic 
              aes(x = long,
                  y = temp)) +
  geom_path(color = "pink",                # Line Plot
            size = 2) +
  geom_point(size = 2) +
  geom_text_repel(aes(label = paste0(temp, "Â°", "/", day, month)), size = 3)

# Adjusting x-axis limits without filtering data points.
cities = cities +
  coord_cartesian(xlim = c(24, 38)) +       # Zooming 
  theme_void() +
  labs(x = NULL, y = NULL) +                # Labeling 
  theme(legend.position = "none")

# Adjusting x-axis limits for temperature plot.
temp = temp +
  coord_cartesian(xlim = c(24, 38)) +       # Zooming
  labs(x = NULL, y = "Temperature") +       # Labeling
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        panel.border = element_blank())

# Arranging the cities and temperature plots into a grid.
grid.arrange(cities,
             temp,
             nrow = 2, 
             heights = c(3.5, 1.2))

```
